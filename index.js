// Generated by CoffeeScript 1.12.6
(function() {
  var Instapaper, OAuth, crypto, qline2object, request;

  request = require('request-promise');

  OAuth = require('oauth-1.0a');

  crypto = require('crypto');

  Instapaper = (function() {
    Instapaper.prototype.baseUrl = 'https://www.instapaper.com/api/1/';

    Instapaper.prototype.consumer_key = '';

    Instapaper.prototype.consumer_secret = '';

    Instapaper.prototype.oauth = null;

    Instapaper.prototype.token = null;

    function Instapaper(consumer_key, consumer_secret) {
      this.consumer_key = consumer_key;
      this.consumer_secret = consumer_secret;
      this.oauth = OAuth({
        consumer: {
          key: this.consumer_key,
          secret: this.consumer_secret
        },
        signature_method: 'HMAC-SHA1',
        hash_function: function(base_string, key) {
          return crypto.createHmac('sha1', key).update(base_string).digest('base64');
        }
      });
    }

    Instapaper.prototype.request = function(opts, callback) {
      opts.url = this.baseUrl + opts.url;
      opts.method = 'POST';
      if (this.token) {
        opts.form = this.oauth.authorize(opts);
        opts.headers = this.oauth.toHeader(this.oauth.authorize(opts, this.token));
      } else if (opts.url.indexOf('access_token') > 0) {
        opts.form = this.oauth.authorize(opts);
      } else {
        opts.form = opts.data;
      }
      return new Promise(function(resolve, reject) {
        return request(opts).then(function(data) {
          if (opts.format === 'raw') {
            return resolve(data);
          } else if (opts.format === 'qline') {
            return resolve(qline2object(data));
          } else {
            return resolve(JSON.parse(data));
          }
        })["catch"](function(error) {
          return reject(error);
        });
      });
    };

    Instapaper.prototype.requestToken = function(user, password) {
      return this.request({
        format: 'qline',
        url: 'oauth/access_token',
        data: {
          x_auth_username: user,
          x_auth_password: password,
          x_auth_mode: 'client_auth'
        }
      });
    };

    Instapaper.prototype.setToken = function(token, secret) {
      return this.token = {
        key: token,
        secret: secret
      };
    };

    Instapaper.prototype.verifyCredentials = function() {
      return this.request({
        url: 'account/verify_credentials'
      });
    };

    Instapaper.prototype.login = function(user, password) {
      var vm;
      vm = this;
      return new Promise(function(resolve, reject) {
        return vm.requestToken(user, password).then(function(authData) {
          vm.setToken(authData.oauth_token, authData.oauth_token_secret);
          return resolve();
        })["catch"](function(err) {
          return reject(err);
        });
      });
    };

    Instapaper.prototype.listBookmarks = function(params) {
      if (params == null) {
        params = {};
      }
      return this.request({
        url: 'bookmarks/list',
        data: params
      });
    };

    Instapaper.prototype.updateBookmarkProgress = function(params) {
      if (params == null) {
        params = {};
      }
      return this.request({
        url: 'bookmarks/update_read_progress',
        data: params
      });
    };

    Instapaper.prototype.addBookmark = function(params) {
      if (params == null) {
        params = {};
      }
      return this.request({
        url: 'bookmarks/add',
        data: params
      });
    };

    Instapaper.prototype.deleteBookmark = function(bookmark_id) {
      return this.request({
        url: 'bookmarks/delete',
        data: {
          bookmark_id: bookmark_id
        }
      });
    };

    Instapaper.prototype.starBookmark = function(bookmark_id) {
      return this.request({
        url: 'bookmarks/star',
        data: {
          bookmark_id: bookmark_id
        }
      });
    };

    Instapaper.prototype.unstarBookmark = function(bookmark_id) {
      return this.request({
        url: 'bookmarks/unstar',
        data: {
          bookmark_id: bookmark_id
        }
      });
    };

    Instapaper.prototype.archiveBookmark = function(bookmark_id) {
      return this.request({
        url: 'bookmarks/archive',
        data: {
          bookmark_id: bookmark_id
        }
      });
    };

    Instapaper.prototype.unarchiveBookmark = function(bookmark_id) {
      return this.request({
        url: 'bookmarks/unarchive',
        data: {
          bookmark_id: bookmark_id
        }
      });
    };

    Instapaper.prototype.moveBookmark = function(bookmark_id, folder_id) {
      return this.request({
        url: 'bookmarks/move',
        data: {
          bookmark_id: bookmark_id,
          folder_id: folder_id
        }
      });
    };

    Instapaper.prototype.getText = function(bookmark_id) {
      return this.request({
        format: 'raw',
        url: 'bookmarks/get_text',
        data: {
          bookmark_id: bookmark_id
        }
      });
    };

    Instapaper.prototype.listFolders = function() {
      return this.request({
        url: 'folders/list'
      });
    };

    Instapaper.prototype.addFolder = function(title) {
      return this.request({
        url: 'folders/add',
        data: {
          title: title
        }
      });
    };

    Instapaper.prototype.deleteFolder = function(folder_id) {
      return this.request({
        url: 'folders/delete',
        data: {
          folder_id: folder_id
        }
      });
    };

    return Instapaper;

  })();

  qline2object = function(query) {
    var i, item, len, parts, result;
    if (query == null) {
      query = "";
    }
    result = {};
    parts = query.split("&");
    for (i = 0, len = parts.length; i < len; i++) {
      item = parts[i];
      item = item.split("=");
      result[item[0]] = item[1];
    }
    return result;
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Instapaper;
  }

}).call(this);
